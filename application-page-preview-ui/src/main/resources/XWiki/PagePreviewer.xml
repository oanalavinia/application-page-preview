<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="XWiki.PagePreviewer" locale="">
  <web>XWiki</web>
  <name>PagePreviewer</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1550440304000</creationDate>
  <parent>WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1550559959000</date>
  <contentUpdateDate>1550559959000</contentUpdateDate>
  <version>1.1</version>
  <title>Page Previewer</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <content>{{groovy}}
import groovy.json.JsonBuilder
import groovy.json.JsonOutput

import com.xpn.xwiki.api.Document
import com.xpn.xwiki.web.Utils

import org.xwiki.component.util.DefaultParameterizedType
import org.xwiki.model.reference.DocumentReference
import org.xwiki.resource.ResourceReferenceResolver
import org.xwiki.resource.ResourceTypeResolver
import org.xwiki.url.ExtendedURL

// This script prints a JSON object containing 1) the rendered content of the page corresponding to
// the path given as parameter, 2) the relative URL of the first image attached to that page,
// if any.

// TODO: avoid loop when there's a link to this page itself. Check what happens with the Movies.WebHome page.
  
// Converts a relative URL path to an EntityReference
DocumentReference convertPathToDocumentReference(String path) {
  def serverUrl = xcontext.URLFactory.getServerURL(xcontext.context)
  def url = serverUrl.toURI().resolve(path).toURL()
  // Code copied from XWiki::initializeResourceFromURL
  def extendedUrl = new ExtendedURL(url, xcontext.request.contextPath)
  def typeResolver = Utils.getComponent(new DefaultParameterizedType(null, ResourceTypeResolver.class, ExtendedURL.class))
  def type = typeResolver.resolve(extendedUrl, Collections.&lt;String, Object&gt;emptyMap())
  def resourceResolver = Utils.getComponent(new DefaultParameterizedType(null, ResourceReferenceResolver.class, ExtendedURL.class))
  def reference = resourceResolver.resolve(extendedUrl, type, Collections.&lt;String, Object&gt;emptyMap())
  if (reference != null) {
    return new DocumentReference(reference.entityReference)
  }
  return null
}

// Returns the relative path of first attached image, if any
String maybeGetImageUrl(Document page) {
  for (Object attachment : page.attachmentList) {
    if (attachment.isImage()) {
      return page.getAttachmentURL(attachment.filename)
    }
  }
  return null
}

def path = request.path
if (path != null) {
  response.setContentType('application/json')
  def reference = convertPathToDocumentReference(path)
  def content = ""
  def imageUrl = null
  // Don't render this page itself in case there's a link to it because it will loop
  if (reference != doc.documentReference) {
    def page = xwiki.getDocument(reference)
    content = page.renderedContent
    imageUrl = maybeGetImageUrl(page)
  } else {
    content = "&lt;p&gt;PagePreviewer is an extension used for displaying page preview popovers on page links.&lt;/p&gt;"
  }
  def builder = new JsonBuilder()
  builder {
    html "$content"
  }
  if (imageUrl != null) {
    builder.content.image = imageUrl
  }
  println(JsonOutput.prettyPrint(builder.toString()))
}
{{/groovy}}
</content>
  <object>
    <name>XWiki.PagePreviewer</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>fefcfc33-52af-4a05-a0a8-a73aecc5c834</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>document.observe("xwiki:dom:loaded", function() {
  require(['jquery', 'bootstrap'], function ($, bootstrap) {
    $(".wikilink").each(function() {
      $(this).popover({
        trigger: "hover",
        placement: "auto bottom",
        delay: { "show": 500, "hide": 100 },
        html: true,
        content: function() {
          // Create a random temporary id for the content's parent div
          // with a unique number just in case.
          var contentId = "content-" + $.now();
          var imageId = "image-" + $.now();
          var path = $(this).find("a").attr('href');
          #set ($previewer = $xwiki.getDocument('XWiki.PagePreviewer'))
          #set ($url = $$previewer.getURL())
          $.ajax({
            type: 'GET',
            url: '$url?xpage=plain&amp;outputSyntax=plain&amp;path=' + encodeURIComponent(path),
            cache: false,
          }).done(function(data){
            var linkedPageContent = $('&lt;div&gt;'+data.html+'&lt;/div&gt;');
            var blocks = linkedPageContent.find('p,table,ul,ol,blockquote');
            var content = "";
            if (blocks.size() &gt; 0) {
              content = blocks[0].outerHTML;
            }
            var imageUrl = data.image;
            if (imageUrl &amp;&amp; imageUrl.length &gt; 0) {
              $('#' + imageId).html('&lt;div class="col-md-12" style="text-align:center"&gt;&lt;img src="' + imageUrl + '" /&gt;&lt;/div&gt;');
            }
            var marginTop = '0';
            if (imageUrl &amp;&amp; imageUrl.length &gt; 0)
              marginTop = '1em';
            $('#' + contentId).html('&lt;div class="col-md-12" style="margin-top:' + marginTop + '"&gt;' + content + '&lt;/div&gt;');
          });
          return '&lt;div class="row" id="' + imageId + '"&gt;&lt;div class="col-md-12"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="row" id="' + contentId + '"&gt;&lt;div class="col-md-12"&gt;&lt;img src="$xwiki.getSkinFile('icons/xwiki/spinner.gif')"/&gt;&lt;/div&gt;&lt;/div&gt;'
        }
      });
    });
  });
});


</code>
    </property>
    <property>
      <name>JSX</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>always</use>
    </property>
  </object>
  <object>
    <name>XWiki.PagePreviewer</name>
    <number>0</number>
    <className>XWiki.RequiredRightClass</className>
    <guid>ff71073e-ef27-45ca-9557-9db01a8216b8</guid>
    <class>
      <name>XWiki.RequiredRightClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <level>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>level</name>
        <number>1</number>
        <picker>0</picker>
        <prettyName>level</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <sort>none</sort>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <values>edit|programming</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </level>
    </class>
    <property>
      <level>programming</level>
    </property>
  </object>
  <object>
    <name>XWiki.PagePreviewer</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>25b7d8bb-c7df-4550-ab84-75e98c61aa2b</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>.popover .arrow {
  visibility:hidden
}</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name>SSX</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>always</use>
    </property>
  </object>
</xwikidoc>
